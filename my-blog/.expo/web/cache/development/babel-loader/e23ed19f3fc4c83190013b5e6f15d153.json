{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport style from \"./style\";\n\nvar Row = function (_Component) {\n  _inherits(Row, _Component);\n\n  var _super = _createSuper(Row);\n\n  function Row() {\n    _classCallCheck(this, Row);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Row, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        rntgrowId: this.props.id\n      };\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.context.rntgAddRowToGrid(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: style.row\n      }, this.props.children);\n    }\n  }]);\n\n  return Row;\n}(Component);\n\nRow.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.element).isRequired,\n  id: PropTypes.number.isRequired\n};\nRow.contextTypes = {\n  rntgAddRowToGrid: PropTypes.func\n};\nRow.childContextTypes = {\n  rntgrowId: PropTypes.number\n};\nexport { Row as default };","map":{"version":3,"sources":["D:/Coding/react/invoke/finalProject/my-blog/node_modules/react-native-markdown-view/node_modules/react-native-tabular-grid-markdown-view/src/Row.js"],"names":["PropTypes","React","Component","style","Row","rntgrowId","props","id","context","rntgAddRowToGrid","row","children","propTypes","arrayOf","element","isRequired","number","contextTypes","func","childContextTypes"],"mappings":";;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAGA,OAAOC,KAAP;;IAEqBC,G;;;;;;;;;;;;;WAejB,2BAAkB;AACd,aAAO;AACHC,QAAAA,SAAS,EAAE,KAAKC,KAAL,CAAWC;AADnB,OAAP;AAGH;;;WAED,8BAAqB;AACjB,WAAKC,OAAL,CAAaC,gBAAb,CAA8B,IAA9B;AACH;;;WAED,kBAAS;AACL,aAAO,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEN,KAAK,CAACO;AAAnB,SAAyB,KAAKJ,KAAL,CAAWK,QAApC,CAAP;AACH;;;;EA3B4BT,S;;AAAZE,G,CAEVQ,S,GAAY;AACfD,EAAAA,QAAQ,EAAEX,SAAS,CAACa,OAAV,CAAkBb,SAAS,CAACc,OAA5B,EAAqCC,UADhC;AAEfR,EAAAA,EAAE,EAAEP,SAAS,CAACgB,MAAV,CAAiBD;AAFN,C;AAFFX,G,CAOVa,Y,GAAe;AAClBR,EAAAA,gBAAgB,EAAET,SAAS,CAACkB;AADV,C;AAPLd,G,CAWVe,iB,GAAoB;AACvBd,EAAAA,SAAS,EAAEL,SAAS,CAACgB;AADE,C;SAXVZ,G","sourcesContent":["import PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {View} from 'react-native';\n\nimport style from './style';\n\nexport default class Row extends Component {\n\n    static propTypes = {\n        children: PropTypes.arrayOf(PropTypes.element).isRequired,\n        id: PropTypes.number.isRequired\n    };\n\n    static contextTypes = {\n        rntgAddRowToGrid: PropTypes.func\n    };\n\n    static childContextTypes = {\n        rntgrowId: PropTypes.number\n    };\n\n    getChildContext() {\n        return {\n            rntgrowId: this.props.id\n        };\n    }\n\n    componentWillMount() {\n        this.context.rntgAddRowToGrid(this);\n    }\n\n    render() {\n        return <View style={style.row}>{this.props.children}</View>;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
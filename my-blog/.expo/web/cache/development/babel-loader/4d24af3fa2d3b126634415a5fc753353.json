{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport style from \"./style\";\n\nvar Grid = function (_Component) {\n  _inherits(Grid, _Component);\n\n  var _super = _createSuper(Grid);\n\n  function Grid() {\n    var _this;\n\n    _classCallCheck(this, Grid);\n\n    _this = _super.apply(this, arguments);\n    _this.columns = [];\n    _this.rowHeights = {};\n    return _this;\n  }\n\n  _createClass(Grid, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        rntgAddRowToGrid: this.addRowToGrid.bind(this),\n        rntgMeasureCell: this.measureCell.bind(this)\n      };\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (nextState) {\n        if (!this.state || Object.keys(nextState).join('.') !== Object.keys(this.state).join('.')) {\n          return true;\n        }\n\n        if (nextState.rowHeights) {\n          for (var _i = 0, _Object$keys = Object.keys(nextState.rowHeights); _i < _Object$keys.length; _i++) {\n            var rowId = _Object$keys[_i];\n\n            if (nextState.rowHeights[rowId] !== this.state.rowHeights[rowId]) {\n              return true;\n            }\n          }\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"lastChild\",\n    get: function get() {\n      return this.props.children[this.props.children.length - 1];\n    }\n  }, {\n    key: \"addRowToGrid\",\n    value: function addRowToGrid(row) {\n      this.mapRowIntoColumns(row);\n      this.updateIfRowIsLast(row);\n    }\n  }, {\n    key: \"measureCell\",\n    value: function measureCell(rowId, cellId, x, y, w, h) {\n      this.rowHeights[rowId] = Math.max(h, this.rowHeights[rowId] || 0);\n      this.updateIfCellIsLast(rowId, cellId);\n    }\n  }, {\n    key: \"mapRowIntoColumns\",\n    value: function mapRowIntoColumns(row) {\n      var _this2 = this;\n\n      row.props.children.forEach(function (cell, index) {\n        if (!_this2.columns[index]) {\n          _this2.columns[index] = [];\n        }\n\n        _this2.columns[index].push(cell);\n      });\n    }\n  }, {\n    key: \"updateIfRowIsLast\",\n    value: function updateIfRowIsLast(row) {\n      if (row.props.id === this.lastChild.props.id) {\n        this.setState({\n          columns: this.columns\n        });\n      }\n    }\n  }, {\n    key: \"updateIfCellIsLast\",\n    value: function updateIfCellIsLast(rowId, cellId) {\n      if (rowId === this.lastChild.props.id) {\n        var lastCell = this.lastChild.props.children[this.lastChild.props.children.length - 1];\n\n        if (cellId === lastCell.props.id) {\n          this.setState({\n            rowHeights: _objectSpread({}, this.rowHeights)\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (!this.columns.length) {\n        return React.createElement(View, {\n          style: style.grid\n        }, this.props.children);\n      }\n\n      return React.createElement(View, {\n        style: [style.grid, style.gridColumn, this.props.style]\n      }, this.columns.map(function (col, i) {\n        return React.createElement(View, {\n          key: i,\n          style: [style.column]\n        }, col.map(function (cell, index) {\n          return React.createElement(View, {\n            key: index,\n            style: [{\n              minHeight: _this3.state.rowHeights && _this3.state.rowHeights[index + 1]\n            }]\n          }, cell);\n        }));\n      }));\n    }\n  }]);\n\n  return Grid;\n}(Component);\n\nGrid.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.element).isRequired\n};\nGrid.childContextTypes = {\n  rntgAddRowToGrid: PropTypes.func,\n  rntgMeasureCell: PropTypes.func\n};\nexport { Grid as default };","map":{"version":3,"sources":["D:/Coding/react/invoke/finalProject/my-blog/node_modules/react-native-markdown-view/node_modules/react-native-tabular-grid-markdown-view/src/Grid.js"],"names":["PropTypes","React","Component","style","Grid","arguments","columns","rowHeights","rntgAddRowToGrid","addRowToGrid","bind","rntgMeasureCell","measureCell","nextProps","nextState","state","Object","keys","join","rowId","props","children","length","row","mapRowIntoColumns","updateIfRowIsLast","cellId","x","y","w","h","Math","max","updateIfCellIsLast","forEach","cell","index","push","id","lastChild","setState","lastCell","grid","gridColumn","map","col","i","column","minHeight","propTypes","arrayOf","element","isRequired","childContextTypes","func"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {View} from 'react-native';\n\nimport style from './style';\n\nexport default class Grid extends Component {\n\n    static propTypes = {\n        children: PropTypes.arrayOf(PropTypes.element).isRequired\n    };\n\n    static childContextTypes = {\n        rntgAddRowToGrid: PropTypes.func,\n        rntgMeasureCell: PropTypes.func\n    };\n\n    constructor() {\n        super(...arguments);\n        this.columns = [];\n        this.rowHeights = {};\n    }\n\n    getChildContext() {\n        return {\n            rntgAddRowToGrid: this.addRowToGrid.bind(this),\n            rntgMeasureCell: this.measureCell.bind(this)\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextState) {\n            if (!this.state || Object.keys(nextState).join('.') !== Object.keys(this.state).join('.')) {\n                return true;\n            }\n            if (nextState.rowHeights) {\n                for (let rowId of Object.keys(nextState.rowHeights)) {\n                    if (nextState.rowHeights[rowId] !== this.state.rowHeights[rowId]) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    get lastChild() {\n        return this.props.children[this.props.children.length-1];\n    }\n\n    addRowToGrid(row) {\n        this.mapRowIntoColumns(row);\n        this.updateIfRowIsLast(row);\n    }\n\n    measureCell(rowId, cellId, x, y, w, h) {\n        this.rowHeights[rowId] = Math.max(h, this.rowHeights[rowId]||0);\n        this.updateIfCellIsLast(rowId, cellId);\n    }\n\n    mapRowIntoColumns(row) {\n        row.props.children.forEach((cell, index) => {\n            if (!this.columns[index]) {\n                this.columns[index] = [];\n            }\n            this.columns[index].push(cell);\n        });\n    }\n\n    updateIfRowIsLast(row) {\n        //if we have all rows, save the column structure into 'state' so\n        //that we can render it\n        if (row.props.id === this.lastChild.props.id) {\n            this.setState({\n                columns: this.columns\n            });\n        }\n    }\n\n    updateIfCellIsLast(rowId, cellId) {\n        if (rowId === this.lastChild.props.id) {\n            const lastCell = this.lastChild.props.children[this.lastChild.props.children.length-1];\n            if (cellId === lastCell.props.id) {\n                this.setState({\n                    rowHeights: {...this.rowHeights}\n                });\n            }\n        }\n    }\n\n    render() {\n        if (!this.columns.length) {\n            return <View style={style.grid}>{this.props.children}</View>;\n        }\n        return (\n            <View style={[style.grid, style.gridColumn, this.props.style]}>\n            {this.columns.map((col, i) => (\n                <View key={i} style={[style.column]}>\n                {col.map((cell, index) => (\n                    <View key={index} style={[\n                        {minHeight: this.state.rowHeights && this.state.rowHeights[index+1]}\n                    ]}>\n                        {cell}\n                    </View>\n                ))}\n                </View>\n            ))}\n            </View>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
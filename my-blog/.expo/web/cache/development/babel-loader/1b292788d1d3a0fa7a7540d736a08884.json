{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"field\", \"form\"];\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\n\nvar CustomInput = function CustomInput(props) {\n  var _props$field = props.field,\n      name = _props$field.name,\n      _onBlur = _props$field.onBlur,\n      onChange = _props$field.onChange,\n      value = _props$field.value,\n      _props$form = props.form,\n      errors = _props$form.errors,\n      touched = _props$form.touched,\n      setFieldTouched = _props$form.setFieldTouched,\n      inputProps = _objectWithoutProperties(props, _excluded);\n\n  var hasError = errors[name] && touched[name];\n  return React.createElement(React.Fragment, null, React.createElement(TextInput, _extends({\n    style: [styles.textInput, hasError && styles.errorInput],\n    value: value,\n    onChangeText: function onChangeText(text) {\n      return onChange(name)(text);\n    },\n    onBlur: function onBlur() {\n      setFieldTouched(name);\n\n      _onBlur(name);\n    }\n  }, inputProps)), hasError && React.createElement(Text, {\n    style: styles.errorText\n  }, errors[name]));\n};\n\nvar styles = StyleSheet.create({\n  textInput: {\n    height: 40,\n    width: '100%',\n    margin: 10,\n    backgroundColor: 'white',\n    borderColor: 'gray',\n    borderWidth: StyleSheet.hairlineWidth,\n    borderRadius: 10\n  },\n  errorText: {\n    fontSize: 10,\n    color: 'red'\n  },\n  errorInput: {\n    borderColor: 'red'\n  }\n});\nexport default CustomInput;","map":{"version":3,"sources":["D:/Coding/react/invoke/finalProject/my-blog/src/components/CustomInput.jsx"],"names":["React","CustomInput","props","field","name","onBlur","onChange","value","form","errors","touched","setFieldTouched","inputProps","hasError","styles","textInput","errorInput","text","errorText","StyleSheet","create","height","width","margin","backgroundColor","borderColor","borderWidth","hairlineWidth","borderRadius","fontSize","color"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC7B,qBAIIA,KAJJ,CACEC,KADF;AAAA,MACWC,IADX,gBACWA,IADX;AAAA,MACiBC,OADjB,gBACiBA,MADjB;AAAA,MACyBC,QADzB,gBACyBA,QADzB;AAAA,MACmCC,KADnC,gBACmCA,KADnC;AAAA,oBAIIL,KAJJ,CAEEM,IAFF;AAAA,MAEUC,MAFV,eAEUA,MAFV;AAAA,MAEkBC,OAFlB,eAEkBA,OAFlB;AAAA,MAE2BC,eAF3B,eAE2BA,eAF3B;AAAA,MAGKC,UAHL,4BAIIV,KAJJ;;AAMA,MAAMW,QAAQ,GAAGJ,MAAM,CAACL,IAAD,CAAN,IAAgBM,OAAO,CAACN,IAAD,CAAxC;AAEA,SACE,0CACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAE,CACLU,MAAM,CAACC,SADF,EAELF,QAAQ,IAAIC,MAAM,CAACE,UAFd,CADT;AAKE,IAAA,KAAK,EAAET,KALT;AAME,IAAA,YAAY,EAAE,sBAACU,IAAD;AAAA,aAAUX,QAAQ,CAACF,IAAD,CAAR,CAAea,IAAf,CAAV;AAAA,KANhB;AAOE,IAAA,MAAM,EAAE,kBAAM;AACZN,MAAAA,eAAe,CAACP,IAAD,CAAf;;AACAC,MAAAA,OAAM,CAACD,IAAD,CAAN;AACD;AAVH,KAWMQ,UAXN,EADF,EAcGC,QAAQ,IAAI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACI;AAApB,KAAgCT,MAAM,CAACL,IAAD,CAAtC,CAdf,CADF;AAkBD,CA3BD;;AA6BA,IAAMU,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,MAAM,EAAE,EADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,MAAM,EAAE,EAHC;AAITC,IAAAA,eAAe,EAAE,OAJR;AAKTC,IAAAA,WAAW,EAAE,MALJ;AAMTC,IAAAA,WAAW,EAAEP,UAAU,CAACQ,aANf;AAOTC,IAAAA,YAAY,EAAE;AAPL,GADoB;AAU/BV,EAAAA,SAAS,EAAE;AACTW,IAAAA,QAAQ,EAAE,EADD;AAETC,IAAAA,KAAK,EAAE;AAFE,GAVoB;AAc/Bd,EAAAA,UAAU,EAAE;AACVS,IAAAA,WAAW,EAAE;AADH;AAdmB,CAAlB,CAAf;AAmBA,eAAexB,WAAf","sourcesContent":["import React from 'react'\r\nimport { Text, TextInput, StyleSheet } from 'react-native'\r\n\r\nconst CustomInput = (props) => {\r\n  const {\r\n    field: { name, onBlur, onChange, value },\r\n    form: { errors, touched, setFieldTouched },\r\n    ...inputProps\r\n  } = props\r\n\r\n  const hasError = errors[name] && touched[name]\r\n\r\n  return (\r\n    <>\r\n      <TextInput\r\n        style={[\r\n          styles.textInput,\r\n          hasError && styles.errorInput\r\n        ]}\r\n        value={value}\r\n        onChangeText={(text) => onChange(name)(text)}\r\n        onBlur={() => {\r\n          setFieldTouched(name)\r\n          onBlur(name)\r\n        }}\r\n        {...inputProps}\r\n      />\r\n      {hasError && <Text style={styles.errorText}>{errors[name]}</Text>}\r\n    </>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  textInput: {\r\n    height: 40,\r\n    width: '100%',\r\n    margin: 10,\r\n    backgroundColor: 'white',\r\n    borderColor: 'gray',\r\n    borderWidth: StyleSheet.hairlineWidth,\r\n    borderRadius: 10,\r\n  },\r\n  errorText: {\r\n    fontSize: 10,\r\n    color: 'red',\r\n  },\r\n  errorInput: {\r\n    borderColor: 'red',\r\n  }\r\n})\r\n\r\nexport default CustomInput"]},"metadata":{},"sourceType":"module"}
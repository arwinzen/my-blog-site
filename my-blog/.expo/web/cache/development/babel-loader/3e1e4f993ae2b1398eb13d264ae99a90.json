{"ast":null,"code":"import React from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { Formik, Field } from 'formik';\nimport * as yup from 'yup';\nimport CustomInput from \"../components/CustomInput\";\nvar signUpValidationSchema = yup.object().shape({\n  fullName: yup.string().matches(/(\\w.+\\s).+/, 'Enter at least 2 names').required('Full name is required'),\n  userName: yup.string().required('User name is required'),\n  email: yup.string().email(\"Please enter valid email\").required('Email is required'),\n  password: yup.string().min(8, function (_ref) {\n    var min = _ref.min;\n    return \"Password must be at least \" + min + \" characters\";\n  }).required('Password is required'),\n  confirmPassword: yup.string().oneOf([yup.ref('password')], 'Passwords do not match').required('Confirm password is required')\n});\n\nvar Register = function Register() {\n  return React.createElement(React.Fragment, null, React.createElement(StatusBar, {\n    barStyle: \"dark-content\"\n  }), React.createElement(SafeAreaView, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.signupContainer\n  }, React.createElement(Text, null, \"Sign Up Screen\"), React.createElement(Formik, {\n    validationSchema: signUpValidationSchema,\n    initialValues: {\n      fullName: '',\n      userName: '',\n      email: '',\n      password: '',\n      confirmPassword: ''\n    },\n    onSubmit: function onSubmit(values) {\n      return console.log(values);\n    }\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit,\n        isValid = _ref2.isValid;\n    return React.createElement(React.Fragment, null, React.createElement(Field, {\n      component: CustomInput,\n      name: \"fullName\",\n      placeholder: \"Full Name\"\n    }), React.createElement(Field, {\n      component: CustomInput,\n      name: \"userName\",\n      placeholder: \"User Name\"\n    }), React.createElement(Field, {\n      component: CustomInput,\n      name: \"email\",\n      placeholder: \"Email Address\",\n      keyboardType: \"email-address\"\n    }), React.createElement(Field, {\n      component: CustomInput,\n      name: \"password\",\n      placeholder: \"Password\",\n      secureTextEntry: true\n    }), React.createElement(Field, {\n      component: CustomInput,\n      name: \"confirmPassword\",\n      placeholder: \"Confirm Password\",\n      secureTextEntry: true\n    }), React.createElement(Button, {\n      onPress: handleSubmit,\n      title: \"SIGN UP\",\n      disabled: !isValid\n    }));\n  }))));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  signupContainer: {\n    width: '80%',\n    alignItems: 'center',\n    backgroundColor: 'white',\n    padding: 10,\n    elevation: 10,\n    backgroundColor: '#e6e6e6'\n  }\n});\nexport default Register;","map":{"version":3,"sources":["D:/Coding/react/invoke/finalProject/my-blog/src/Screens/Register.jsx"],"names":["React","Formik","Field","yup","CustomInput","signUpValidationSchema","object","shape","fullName","string","matches","required","userName","email","password","min","confirmPassword","oneOf","ref","Register","styles","container","signupContainer","values","console","log","handleSubmit","isValid","StyleSheet","create","flex","justifyContent","alignItems","width","backgroundColor","padding","elevation"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {\r\n  SafeAreaView,\r\n  StyleSheet,\r\n  View,\r\n  Text,\r\n  StatusBar,\r\n  TextInput,\r\n  Button,\r\n  KeyboardAvoidingView,\r\n  TouchableWithoutFeedback\r\n} from 'react-native'\r\nimport { Formik, Field } from 'formik'\r\nimport * as yup from 'yup'\r\nimport CustomInput from '../components/CustomInput';\r\n\r\n\r\nconst signUpValidationSchema = yup.object().shape({\r\n    fullName: yup\r\n      .string()\r\n      .matches(/(\\w.+\\s).+/, 'Enter at least 2 names')\r\n      .required('Full name is required'),\r\n    userName: yup\r\n      .string()\r\n      .required('User name is required'),\r\n    email: yup\r\n      .string()\r\n      .email(\"Please enter valid email\")\r\n      .required('Email is required'),\r\n    password: yup\r\n      .string()\r\n    //   .matches(/\\w*[a-z]\\w*/,  \"Password must have a small letter\")\r\n    //   .matches(/\\w*[A-Z]\\w*/,  \"Password must have a capital letter\")\r\n    //   .matches(/\\d/, \"Password must have a number\")\r\n    //   .matches(/[!@#$%^&*()\\-_\"=+{}; :,<.>]/, \"Password must have a special character\")\r\n      .min(8, ({ min }) => `Password must be at least ${min} characters`)\r\n      .required('Password is required'),\r\n    confirmPassword: yup\r\n      .string()\r\n      .oneOf([yup.ref('password')], 'Passwords do not match')\r\n      .required('Confirm password is required'),\r\n  })\r\n\r\nconst Register = () => {\r\n  return (\r\n    <>\r\n      <StatusBar barStyle=\"dark-content\" />\r\n      <SafeAreaView style={styles.container}>\r\n        <View style={styles.signupContainer}>\r\n          <Text>Sign Up Screen</Text>\r\n          <Formik\r\n            validationSchema={signUpValidationSchema}\r\n            initialValues={{\r\n              fullName: '',\r\n              userName: '',\r\n              email: '',\r\n              password: '',\r\n              confirmPassword: '',\r\n            }}\r\n            // make an axios call here to create new user\r\n            onSubmit={values => console.log(values)}\r\n          >\r\n            {({ handleSubmit, isValid }) => (\r\n              <>\r\n                <Field\r\n                  component={CustomInput}\r\n                  name=\"fullName\"\r\n                  placeholder=\"Full Name\"\r\n                />\r\n                <Field\r\n                  component={CustomInput}\r\n                  name=\"userName\"\r\n                  placeholder=\"User Name\"\r\n                />\r\n                <Field\r\n                  component={CustomInput}\r\n                  name=\"email\"\r\n                  placeholder=\"Email Address\"\r\n                  keyboardType=\"email-address\"\r\n                />\r\n                <Field\r\n                  component={CustomInput}\r\n                  name=\"password\"\r\n                  placeholder=\"Password\"\r\n                  secureTextEntry\r\n                />\r\n                <Field\r\n                  component={CustomInput}\r\n                  name=\"confirmPassword\"\r\n                  placeholder=\"Confirm Password\"\r\n                  secureTextEntry\r\n                />\r\n                <Button\r\n                  onPress={handleSubmit}\r\n                  title=\"SIGN UP\"\r\n                  disabled={!isValid}\r\n                />\r\n              </>\r\n            )}\r\n          </Formik>\r\n        </View>\r\n      </SafeAreaView>\r\n    </>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  signupContainer: {\r\n    width: '80%',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white',\r\n    padding: 10,\r\n    elevation: 10,\r\n    backgroundColor: '#e6e6e6'\r\n  },\r\n})\r\nexport default Register"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useContext, useState } from 'react';\nimport { AuthContext } from \"../Providers/AuthProvider\";\nimport axios from \"../axios_instance\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Formik, Field } from 'formik';\nimport * as yup from 'yup';\nimport CustomInput from \"../components/CustomInput\";\nvar loginValidationSchema = yup.object().shape({\n  email: yup.string().email(\"Please enter valid email\").required('Email Address is Required'),\n  password: yup.string().min(8, function (_ref) {\n    var min = _ref.min;\n    return \"Password must be at least \" + min + \" characters\";\n  }).required('Password is required')\n});\n\nvar Login = function Login(_ref2) {\n  var navigation = _ref2.navigation;\n\n  var _useContext = useContext(AuthContext),\n      login = _useContext.login,\n      error = _useContext.error;\n\n  return React.createElement(React.Fragment, null, React.createElement(StatusBar, {\n    barStyle: \"dark-content\"\n  }), React.createElement(SafeAreaView, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.loginContainer\n  }, React.createElement(Text, null, \"Login Screen\"), React.createElement(Formik, {\n    validationSchema: loginValidationSchema,\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    onSubmit: function onSubmit(values) {\n      login(values.email, values.password);\n    }\n  }, function (_ref3) {\n    var handleSubmit = _ref3.handleSubmit,\n        isValid = _ref3.isValid;\n    return React.createElement(React.Fragment, null, React.createElement(Field, {\n      component: CustomInput,\n      name: \"email\",\n      placeholder: \"Email Address\",\n      keyboardType: \"email-address\"\n    }), React.createElement(Field, {\n      component: CustomInput,\n      name: \"password\",\n      placeholder: \"Password\",\n      secureTextEntry: true\n    }), React.createElement(Button, {\n      onPress: handleSubmit,\n      title: \"LOGIN\",\n      disabled: !isValid\n    }));\n  }))));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  loginContainer: {\n    width: '80%',\n    alignItems: 'center',\n    backgroundColor: 'white',\n    padding: 10,\n    elevation: 10,\n    backgroundColor: '#e6e6e6'\n  },\n  textInput: {\n    height: 40,\n    width: '100%',\n    margin: 10,\n    backgroundColor: 'white',\n    borderColor: 'gray',\n    borderWidth: StyleSheet.hairlineWidth,\n    borderRadius: 10\n  },\n  errorText: {\n    fontSize: 10,\n    color: 'red'\n  }\n});\nexport default Login;","map":{"version":3,"sources":["D:/Coding/react/invoke/finalProject/my-blog/src/Screens/Login.jsx"],"names":["React","useContext","useState","AuthContext","axios","Formik","Field","yup","CustomInput","loginValidationSchema","object","shape","email","string","required","password","min","Login","navigation","login","error","styles","container","loginContainer","values","handleSubmit","isValid","StyleSheet","create","flex","justifyContent","alignItems","width","backgroundColor","padding","elevation","textInput","height","margin","borderColor","borderWidth","hairlineWidth","borderRadius","errorText","fontSize","color"],"mappings":"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","sourcesContent":["import React, { useContext, useState} from 'react';\r\nimport { AuthContext } from '../Providers/AuthProvider';\r\nimport axios from '../axios_instance';\r\nimport {\r\n  SafeAreaView,\r\n  StyleSheet,\r\n  ScrollView,\r\n  View,\r\n  Text,\r\n  StatusBar,\r\n  TextInput,\r\n  Button\r\n} from 'react-native';\r\nimport { Formik, Field } from 'formik';\r\nimport * as yup from 'yup';\r\nimport CustomInput from '../components/CustomInput';\r\n\r\nconst loginValidationSchema = yup.object().shape({\r\n    email: yup\r\n      .string()\r\n      .email(\"Please enter valid email\")\r\n      .required('Email Address is Required'),\r\n    password: yup\r\n      .string()\r\n      .min(8, ({ min }) => `Password must be at least ${min} characters`)\r\n      .required('Password is required'),\r\n  })\r\n\r\nconst Login = ({ navigation }) => {\r\n  const { login, error } = useContext(AuthContext);\r\n\r\n  return (\r\n    <>\r\n      <StatusBar barStyle=\"dark-content\" />\r\n      <SafeAreaView style={styles.container}>\r\n        <View style={styles.loginContainer}>\r\n          <Text>Login Screen</Text>\r\n          <Formik\r\n            validationSchema={loginValidationSchema}\r\n            initialValues={{ email: '', password: '' }}\r\n            // onSubmit = {() => login(values.email, values.password)}\r\n            onSubmit = {(values) => {login(values.email ,values.password)}}\r\n            // // make axios call to authenticate user\r\n            // onSubmit= {(values) => {\r\n            //     axios.post('/sanctum/token', {\r\n            //         email: values.email,\r\n            //         password: values.password,\r\n            //         device_name : 'mobile',\r\n            //     })\r\n            //     .then(response => {\r\n            //         console.log(response.data.user.email, response.data.token)\r\n            //     })\r\n            //     .catch(error => {\r\n            //         console.log(error.response)\r\n            //     })\r\n            // }}\r\n            >\r\n            {({\r\n                handleSubmit,\r\n                isValid,\r\n            }) => (\r\n                <>\r\n                <Field\r\n                  component={CustomInput}\r\n                  name=\"email\"\r\n                  placeholder=\"Email Address\"\r\n                  keyboardType=\"email-address\"\r\n                />\r\n            \r\n                <Field\r\n                  component={CustomInput}\r\n                  name=\"password\"\r\n                  placeholder=\"Password\"\r\n                  secureTextEntry\r\n                />\r\n                <Button\r\n                    onPress={handleSubmit}\r\n                    title=\"LOGIN\"\r\n                    disabled={!isValid}\r\n                />\r\n                </>\r\n            )}\r\n            </Formik>\r\n        </View>\r\n      </SafeAreaView>\r\n    </>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  loginContainer: {\r\n    width: '80%',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white',\r\n    padding: 10,\r\n    elevation: 10,\r\n    backgroundColor: '#e6e6e6'\r\n  },\r\n  textInput: {\r\n    height: 40,\r\n    width: '100%',\r\n    margin: 10,\r\n    backgroundColor: 'white',\r\n    borderColor: 'gray',\r\n    borderWidth: StyleSheet.hairlineWidth,\r\n    borderRadius: 10,\r\n  },\r\n  errorText: {\r\n    fontSize: 10,\r\n    color: 'red',\r\n  },\r\n})\r\n\r\nexport default Login"]},"metadata":{},"sourceType":"module"}
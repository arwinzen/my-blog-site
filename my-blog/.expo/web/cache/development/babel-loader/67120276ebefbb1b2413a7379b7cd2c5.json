{"ast":null,"code":"import React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Cell, Grid, Row } from 'react-native-tabular-grid-markdown-view';\n\nfunction renderImage(node, output, state, styles) {\n  var wrapperStyle = styles.imageWrapper,\n      imageStyle = styles.image;\n  return React.createElement(View, {\n    key: state.key,\n    style: node.width && node.height ? [wrapperStyle, paddedSize(node, wrapperStyle)] : wrapperStyle\n  }, React.createElement(Image, {\n    source: {\n      uri: node.target\n    },\n    style: imageStyle\n  }));\n}\n\nfunction renderTableCell(cell, row, column, rowCount, columnCount, output, state, styles) {\n  var cellStyle = [styles.tableCell];\n  var contentStyle = [styles.tableCellContent];\n\n  if (row % 2 == 0) {\n    cellStyle.push(styles.tableCellEvenRow);\n    contentStyle.push(styles.tableCellContentEvenRow);\n  } else {\n    cellStyle.push(styles.tableCellOddRow);\n    contentStyle.push(styles.tableCellContentOddRow);\n  }\n\n  if (column % 2 == 0) {\n    cellStyle.push(styles.tableCellEvenColumn);\n    contentStyle.push(styles.tableCellContentEvenColumn);\n  } else {\n    cellStyle.push(styles.tableCellOddColumn);\n    contentStyle.push(styles.tableCellContentOddColumn);\n  }\n\n  if (row == 1) {\n    cellStyle.push(styles.tableHeaderCell);\n    contentStyle.push(styles.tableHeaderCellContent);\n  } else if (row == rowCount) {\n    cellStyle.push(styles.tableCellLastRow);\n    contentStyle.push(styles.tableCellContentLastRow);\n  }\n\n  if (column == columnCount) {\n    cellStyle.push(styles.tableCellLastColumn);\n    contentStyle.push(styles.tableCellContentLastColumn);\n  }\n\n  return React.createElement(Cell, {\n    rowId: row,\n    id: column,\n    key: column,\n    style: cellStyle\n  }, React.createElement(Text, {\n    style: contentStyle\n  }, output(cell, state)));\n}\n\nfunction paragraphRenderer() {\n  var renderText = textContentRenderer('paragraph');\n  return function (node, output, state, styles) {\n    if (node.content instanceof Array && node.content.length === 1 && node.content[0].type === 'image') {\n      var imageNode = node.content[0];\n      return renderImage(imageNode, output, state, styles);\n    } else {\n      return renderText(node, output, state, styles);\n    }\n  };\n}\n\nfunction textContentRenderer(styleName, styleName2) {\n  return function (node, output, state, styles) {\n    return React.createElement(Text, {\n      key: state.key,\n      style: styleName2 ? [styles[styleName], styles[styleName2]] : styles[styleName]\n    }, typeof node.content === 'string' ? node.content : output(node.content, state));\n  };\n}\n\nfunction paddedSize(size, style) {\n  function either(a, b) {\n    return a === undefined ? b : a;\n  }\n\n  var _style$padding = style.padding,\n      padding = _style$padding === void 0 ? 0 : _style$padding,\n      paddingLeft = style.paddingLeft,\n      paddingRight = style.paddingRight,\n      paddingTop = style.paddingTop,\n      paddingBottom = style.paddingBottom;\n  return {\n    width: size.width + either(paddingLeft, padding) + either(paddingRight, padding),\n    height: size.height + either(paddingTop, padding) + either(paddingBottom, padding)\n  };\n}\n\nexport default Object.freeze({\n  blockQuote: textContentRenderer('blockQuote'),\n  br: function br(node, output, state, styles) {\n    return React.createElement(Text, {\n      key: state.key,\n      style: styles.br\n    }, '\\n\\n');\n  },\n  codeBlock: textContentRenderer('codeBlock'),\n  del: textContentRenderer('del'),\n  em: textContentRenderer('em'),\n  heading: function heading(node, output, state, styles) {\n    return textContentRenderer('heading', 'heading' + node.level)(node, output, state, styles);\n  },\n  hr: function hr(node, output, state, styles) {\n    return React.createElement(View, {\n      key: state.key,\n      style: styles.hr\n    });\n  },\n  image: renderImage,\n  inlineCode: textContentRenderer('inlineCode'),\n  link: function link(node, output, state, styles) {\n    var onPress = state.onLinkPress;\n    return React.createElement(Text, {\n      key: state.key,\n      style: styles.link,\n      onPress: onPress ? function () {\n        return onPress(node.target);\n      } : null\n    }, typeof node.content === 'string' ? node.content : output(node.content, state));\n  },\n  list: function list(node, output, state, styles) {\n    return React.createElement(View, {\n      key: state.key,\n      style: styles.list\n    }, node.items.map(function (item, i) {\n      return React.createElement(View, {\n        key: i,\n        style: styles.listItem\n      }, node.ordered ? React.createElement(Text, {\n        style: styles.listItemNumber\n      }, i + 1 + \".\") : React.createElement(Text, {\n        style: styles.listItemBullet\n      }, styles.listItemBullet && styles.listItemBullet.content ? styles.listItemBullet.content : \"\\u2022\"), React.createElement(Text, {\n        style: node.ordered ? styles.listItemOrderedContent : styles.listItemUnorderedContent\n      }, output(item, state)));\n    }));\n  },\n  newline: function newline(node, output, state, styles) {\n    return React.createElement(Text, {\n      key: state.key,\n      style: styles.newline\n    }, '\\n');\n  },\n  paragraph: paragraphRenderer(),\n  strong: textContentRenderer('strong'),\n  table: function table(node, output, state, styles) {\n    return React.createElement(Grid, {\n      key: state.key,\n      style: styles.table\n    }, [React.createElement(Row, {\n      id: 1,\n      key: 1\n    }, node.header.map(function (cell, column) {\n      return renderTableCell(cell, 1, column + 1, node.cells.length + 1, node.header.length, output, state, styles);\n    }))].concat(node.cells.map(function (cells, row) {\n      return React.createElement(Row, {\n        id: row + 2,\n        key: row + 2\n      }, cells.map(function (cell, column) {\n        return renderTableCell(cell, row + 2, column + 1, node.cells.length + 1, cells.length, output, state, styles);\n      }));\n    })));\n  },\n  text: textContentRenderer('text'),\n  u: textContentRenderer('u')\n});","map":{"version":3,"sources":["D:/Coding/react/invoke/finalProject/my-blog/node_modules/react-native-markdown-view/renders.js"],"names":["React","Cell","Grid","Row","renderImage","node","output","state","styles","wrapperStyle","imageWrapper","imageStyle","image","key","width","height","paddedSize","uri","target","renderTableCell","cell","row","column","rowCount","columnCount","cellStyle","tableCell","contentStyle","tableCellContent","push","tableCellEvenRow","tableCellContentEvenRow","tableCellOddRow","tableCellContentOddRow","tableCellEvenColumn","tableCellContentEvenColumn","tableCellOddColumn","tableCellContentOddColumn","tableHeaderCell","tableHeaderCellContent","tableCellLastRow","tableCellContentLastRow","tableCellLastColumn","tableCellContentLastColumn","paragraphRenderer","renderText","textContentRenderer","content","Array","length","type","imageNode","styleName","styleName2","size","style","either","a","b","undefined","padding","paddingLeft","paddingRight","paddingTop","paddingBottom","Object","freeze","blockQuote","br","codeBlock","del","em","heading","level","hr","inlineCode","link","onPress","onLinkPress","list","items","map","item","i","listItem","ordered","listItemNumber","listItemBullet","listItemOrderedContent","listItemUnorderedContent","newline","paragraph","strong","table","header","cells","concat","text","u"],"mappings":"AAEA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAQA,SACEC,IADF,EAEEC,IAFF,EAGEC,GAHF,QAIO,yCAJP;;AAmBA,SAASC,WAAT,CAAqBC,IAArB,EAAsCC,MAAtC,EAA8DC,KAA9D,EAAkFC,MAAlF,EAAwG;AACtG,MAAqBC,YAArB,GAAwDD,MAAxD,CAAOE,YAAP;AAAA,MAA0CC,UAA1C,GAAwDH,MAAxD,CAAmCI,KAAnC;AACA,SACE,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAEL,KAAK,CAACM,GAAjB;AAAsB,IAAA,KAAK,EAAER,IAAI,CAACS,KAAL,IAAcT,IAAI,CAACU,MAAnB,GAA4B,CAACN,YAAD,EAAeO,UAAU,CAACX,IAAD,EAAOI,YAAP,CAAzB,CAA5B,GAA6EA;AAA1G,KACE,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAE;AAACQ,MAAAA,GAAG,EAAEZ,IAAI,CAACa;AAAX,KAAf;AAAmC,IAAA,KAAK,EAAEP;AAA1C,IADF,CADF;AAKD;;AAED,SAASQ,eAAT,CAAyBC,IAAzB,EAA+BC,GAA/B,EAAoCC,MAApC,EAA4CC,QAA5C,EAAsDC,WAAtD,EAAmElB,MAAnE,EAA2EC,KAA3E,EAAkFC,MAAlF,EAA0F;AACxF,MAAMiB,SAAS,GAAG,CAACjB,MAAM,CAACkB,SAAR,CAAlB;AACA,MAAMC,YAAY,GAAG,CAACnB,MAAM,CAACoB,gBAAR,CAArB;;AAEA,MAAIP,GAAG,GAAG,CAAN,IAAW,CAAf,EAAkB;AAChBI,IAAAA,SAAS,CAACI,IAAV,CAAerB,MAAM,CAACsB,gBAAtB;AACAH,IAAAA,YAAY,CAACE,IAAb,CAAkBrB,MAAM,CAACuB,uBAAzB;AACD,GAHD,MAGO;AACLN,IAAAA,SAAS,CAACI,IAAV,CAAerB,MAAM,CAACwB,eAAtB;AACAL,IAAAA,YAAY,CAACE,IAAb,CAAkBrB,MAAM,CAACyB,sBAAzB;AACD;;AAED,MAAIX,MAAM,GAAG,CAAT,IAAc,CAAlB,EAAqB;AACnBG,IAAAA,SAAS,CAACI,IAAV,CAAerB,MAAM,CAAC0B,mBAAtB;AACAP,IAAAA,YAAY,CAACE,IAAb,CAAkBrB,MAAM,CAAC2B,0BAAzB;AACD,GAHD,MAGO;AACLV,IAAAA,SAAS,CAACI,IAAV,CAAerB,MAAM,CAAC4B,kBAAtB;AACAT,IAAAA,YAAY,CAACE,IAAb,CAAkBrB,MAAM,CAAC6B,yBAAzB;AACD;;AAED,MAAIhB,GAAG,IAAI,CAAX,EAAc;AACZI,IAAAA,SAAS,CAACI,IAAV,CAAerB,MAAM,CAAC8B,eAAtB;AACAX,IAAAA,YAAY,CAACE,IAAb,CAAkBrB,MAAM,CAAC+B,sBAAzB;AACD,GAHD,MAGO,IAAIlB,GAAG,IAAIE,QAAX,EAAqB;AAC1BE,IAAAA,SAAS,CAACI,IAAV,CAAerB,MAAM,CAACgC,gBAAtB;AACAb,IAAAA,YAAY,CAACE,IAAb,CAAkBrB,MAAM,CAACiC,uBAAzB;AACD;;AAED,MAAInB,MAAM,IAAIE,WAAd,EAA2B;AACzBC,IAAAA,SAAS,CAACI,IAAV,CAAerB,MAAM,CAACkC,mBAAtB;AACAf,IAAAA,YAAY,CAACE,IAAb,CAAkBrB,MAAM,CAACmC,0BAAzB;AACD;;AAED,SAAO,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEtB,GAAb;AAAkB,IAAA,EAAE,EAAEC,MAAtB;AAA8B,IAAA,GAAG,EAAEA,MAAnC;AAA2C,IAAA,KAAK,EAAEG;AAAlD,KACL,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEE;AAAb,KACGrB,MAAM,CAACc,IAAD,EAAOb,KAAP,CADT,CADK,CAAP;AAKD;;AAED,SAASqC,iBAAT,GAA6B;AAC3B,MAAIC,UAAU,GAAGC,mBAAmB,CAAC,WAAD,CAApC;AAEA,SAAO,UAACzC,IAAD,EAA0BC,MAA1B,EAAkDC,KAAlD,EAAsEC,MAAtE,EAA+F;AACpG,QAAIH,IAAI,CAAC0C,OAAL,YAAwBC,KAAxB,IAAiC3C,IAAI,CAAC0C,OAAL,CAAaE,MAAb,KAAwB,CAAzD,IAA8D5C,IAAI,CAAC0C,OAAL,CAAa,CAAb,EAAgBG,IAAhB,KAAyB,OAA3F,EAAoG;AAClG,UAAMC,SAAqB,GAAG9C,IAAI,CAAC0C,OAAL,CAAa,CAAb,CAA9B;AACA,aAAO3C,WAAW,CAAC+C,SAAD,EAAY7C,MAAZ,EAAoBC,KAApB,EAA2BC,MAA3B,CAAlB;AACD,KAHD,MAGO;AACL,aAAOqC,UAAU,CAACxC,IAAD,EAAOC,MAAP,EAAeC,KAAf,EAAsBC,MAAtB,CAAjB;AACD;AACF,GAPD;AAQD;;AAED,SAASsC,mBAAT,CAA6BM,SAA7B,EAAwCC,UAAxC,EAAoD;AAClD,SAAO,UAAChD,IAAD,EAA0BC,MAA1B,EAAkDC,KAAlD,EAAsEC,MAAtE;AAAA,WACL,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAED,KAAK,CAACM,GAAjB;AAAsB,MAAA,KAAK,EAAEwC,UAAU,GAAG,CAAC7C,MAAM,CAAC4C,SAAD,CAAP,EAAoB5C,MAAM,CAAC6C,UAAD,CAA1B,CAAH,GAA6C7C,MAAM,CAAC4C,SAAD;AAA1F,OACG,OAAO/C,IAAI,CAAC0C,OAAZ,KAAwB,QAAxB,GAAmC1C,IAAI,CAAC0C,OAAxC,GAAkDzC,MAAM,CAACD,IAAI,CAAC0C,OAAN,EAAexC,KAAf,CAD3D,CADK;AAAA,GAAP;AAKD;;AAED,SAASS,UAAT,CAAoBsC,IAApB,EAA0BC,KAA1B,EAAiC;AAC/B,WAASC,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AACpB,WAAOD,CAAC,KAAKE,SAAN,GAAkBD,CAAlB,GAAsBD,CAA7B;AACD;;AAED,uBAMIF,KANJ,CACEK,OADF;AAAA,MACEA,OADF,+BACY,CADZ;AAAA,MAEEC,WAFF,GAMIN,KANJ,CAEEM,WAFF;AAAA,MAGEC,YAHF,GAMIP,KANJ,CAGEO,YAHF;AAAA,MAIEC,UAJF,GAMIR,KANJ,CAIEQ,UAJF;AAAA,MAKEC,aALF,GAMIT,KANJ,CAKES,aALF;AAQA,SAAO;AACLlD,IAAAA,KAAK,EAAEwC,IAAI,CAACxC,KAAL,GAAa0C,MAAM,CAACK,WAAD,EAAcD,OAAd,CAAnB,GAA4CJ,MAAM,CAACM,YAAD,EAAeF,OAAf,CADpD;AAEL7C,IAAAA,MAAM,EAAEuC,IAAI,CAACvC,MAAL,GAAcyC,MAAM,CAACO,UAAD,EAAaH,OAAb,CAApB,GAA4CJ,MAAM,CAACQ,aAAD,EAAgBJ,OAAhB;AAFrD,GAAP;AAID;;AAED,eAAeK,MAAM,CAACC,MAAP,CAAc;AAC3BC,EAAAA,UAAU,EAAErB,mBAAmB,CAAC,YAAD,CADJ;AAE3BsB,EAAAA,EAAE,EAAE,YAAC/D,IAAD,EAAkBC,MAAlB,EAA0CC,KAA1C,EAA8DC,MAA9D;AAAA,WACF,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAED,KAAK,CAACM,GAAjB;AAAsB,MAAA,KAAK,EAAEL,MAAM,CAAC4D;AAApC,OACG,MADH,CADE;AAAA,GAFuB;AAO3BC,EAAAA,SAAS,EAAEvB,mBAAmB,CAAC,WAAD,CAPH;AAQ3BwB,EAAAA,GAAG,EAAExB,mBAAmB,CAAC,KAAD,CARG;AAS3ByB,EAAAA,EAAE,EAAEzB,mBAAmB,CAAC,IAAD,CATI;AAU3B0B,EAAAA,OAAO,EAAE,iBAACnE,IAAD,EAAoBC,MAApB,EAA4CC,KAA5C,EAAgEC,MAAhE;AAAA,WACPsC,mBAAmB,CAAC,SAAD,EAAY,YAAYzC,IAAI,CAACoE,KAA7B,CAAnB,CAAuDpE,IAAvD,EAA6DC,MAA7D,EAAqEC,KAArE,EAA4EC,MAA5E,CADO;AAAA,GAVkB;AAa3BkE,EAAAA,EAAE,EAAE,YAACrE,IAAD,EAAkBC,MAAlB,EAA0CC,KAA1C,EAA8DC,MAA9D;AAAA,WACF,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAED,KAAK,CAACM,GAAjB;AAAsB,MAAA,KAAK,EAAEL,MAAM,CAACkE;AAApC,MADE;AAAA,GAbuB;AAgB3B9D,EAAAA,KAAK,EAAER,WAhBoB;AAiB3BuE,EAAAA,UAAU,EAAE7B,mBAAmB,CAAC,YAAD,CAjBJ;AAkB3B8B,EAAAA,IAAI,EAAE,cAACvE,IAAD,EAAiBC,MAAjB,EAAyCC,KAAzC,EAA6DC,MAA7D,EAAsF;AAC1F,QAAMqE,OAAO,GAAGtE,KAAK,CAACuE,WAAtB;AACA,WAAO,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEvE,KAAK,CAACM,GAAjB;AAAsB,MAAA,KAAK,EAAEL,MAAM,CAACoE,IAApC;AAA0C,MAAA,OAAO,EAAEC,OAAO,GAAG;AAAA,eAAMA,OAAO,CAACxE,IAAI,CAACa,MAAN,CAAb;AAAA,OAAH,GAAgC;AAA1F,OACJ,OAAOb,IAAI,CAAC0C,OAAZ,KAAwB,QAAxB,GAAmC1C,IAAI,CAAC0C,OAAxC,GAAkDzC,MAAM,CAACD,IAAI,CAAC0C,OAAN,EAAexC,KAAf,CADpD,CAAP;AAGD,GAvB0B;AAwB3BwE,EAAAA,IAAI,EAAE,cAAC1E,IAAD,EAAiBC,MAAjB,EAAyCC,KAAzC,EAA6DC,MAA7D;AAAA,WACJ,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAED,KAAK,CAACM,GAAjB;AAAsB,MAAA,KAAK,EAAEL,MAAM,CAACuE;AAApC,OACG1E,IAAI,CAAC2E,KAAL,CAAWC,GAAX,CAAe,UAACC,IAAD,EAAOC,CAAP;AAAA,aACd,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAEA,CAAX;AAAc,QAAA,KAAK,EAAE3E,MAAM,CAAC4E;AAA5B,SAEI/E,IAAI,CAACgF,OAAL,GACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE7E,MAAM,CAAC8E;AAApB,SAAwCH,CAAC,GAAG,CAA5C,OADF,GAGE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE3E,MAAM,CAAC+E;AAApB,SACG/E,MAAM,CAAC+E,cAAP,IAAyB/E,MAAM,CAAC+E,cAAP,CAAsBxC,OAA/C,GAAyDvC,MAAM,CAAC+E,cAAP,CAAsBxC,OAA/E,GAAyF,QAD5F,CALN,EASE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE1C,IAAI,CAACgF,OAAL,GAAe7E,MAAM,CAACgF,sBAAtB,GAA+ChF,MAAM,CAACiF;AAAnE,SACGnF,MAAM,CAAC4E,IAAD,EAAO3E,KAAP,CADT,CATF,CADc;AAAA,KAAf,CADH,CADI;AAAA,GAxBqB;AA2C3BmF,EAAAA,OAAO,EAAE,iBAACrF,IAAD,EAAkBC,MAAlB,EAA0CC,KAA1C,EAA8DC,MAA9D;AAAA,WACP,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAED,KAAK,CAACM,GAAjB;AAAsB,MAAA,KAAK,EAAEL,MAAM,CAACkF;AAApC,OACG,IADH,CADO;AAAA,GA3CkB;AAgD3BC,EAAAA,SAAS,EAAE/C,iBAAiB,EAhDD;AAiD3BgD,EAAAA,MAAM,EAAE9C,mBAAmB,CAAC,QAAD,CAjDA;AAkD3B+C,EAAAA,KAAK,EAAE,eAACxF,IAAD,EAAkBC,MAAlB,EAA0CC,KAA1C,EAA8DC,MAA9D;AAAA,WACL,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAED,KAAK,CAACM,GAAjB;AAAsB,MAAA,KAAK,EAAEL,MAAM,CAACqF;AAApC,OACG,CAAC,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAY,MAAA,GAAG,EAAE;AAAjB,OACCxF,IAAI,CAACyF,MAAL,CAAYb,GAAZ,CAAgB,UAAC7D,IAAD,EAAOE,MAAP;AAAA,aAAkBH,eAAe,CAACC,IAAD,EAAO,CAAP,EAAUE,MAAM,GAAG,CAAnB,EAAsBjB,IAAI,CAAC0F,KAAL,CAAW9C,MAAX,GAAoB,CAA1C,EAA6C5C,IAAI,CAACyF,MAAL,CAAY7C,MAAzD,EAAiE3C,MAAjE,EAAyEC,KAAzE,EAAgFC,MAAhF,CAAjC;AAAA,KAAhB,CADD,CAAD,EAEOwF,MAFP,CAEc3F,IAAI,CAAC0F,KAAL,CAAWd,GAAX,CAAe,UAACc,KAAD,EAAQ1E,GAAR;AAAA,aAC5B,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAEA,GAAG,GAAG,CAAf;AAAkB,QAAA,GAAG,EAAEA,GAAG,GAAG;AAA7B,SACG0E,KAAK,CAACd,GAAN,CAAU,UAAC7D,IAAD,EAAOE,MAAP;AAAA,eAAkBH,eAAe,CAACC,IAAD,EAAOC,GAAG,GAAG,CAAb,EAAgBC,MAAM,GAAG,CAAzB,EAA4BjB,IAAI,CAAC0F,KAAL,CAAW9C,MAAX,GAAoB,CAAhD,EAAmD8C,KAAK,CAAC9C,MAAzD,EAAiE3C,MAAjE,EAAyEC,KAAzE,EAAgFC,MAAhF,CAAjC;AAAA,OAAV,CADH,CAD4B;AAAA,KAAf,CAFd,CADH,CADK;AAAA,GAlDoB;AA6D3ByF,EAAAA,IAAI,EAAEnD,mBAAmB,CAAC,MAAD,CA7DE;AA8D3BoD,EAAAA,CAAC,EAAEpD,mBAAmB,CAAC,GAAD;AA9DK,CAAd,CAAf","sourcesContent":["/* @flow */\n\nimport React from 'react'\n\nimport {\n  Image,\n  Text,\n  View,\n} from 'react-native'\n\nimport {\n  Cell,\n  Grid,\n  Row,\n} from 'react-native-tabular-grid-markdown-view'\n\nimport type {\n  EmptyNode,\n  HeadingNode,\n  ImageNode,\n  InlineContentNode,\n  LinkNode,\n  ListNode,\n  TableNode,\n  OutputFunction,\n  RenderState,\n  RenderStyles,\n} from './types'\n\nfunction renderImage(node: ImageNode, output: OutputFunction, state: RenderState, styles: RenderStyles) {\n  const {imageWrapper: wrapperStyle, image: imageStyle} = styles\n  return (\n    <View key={state.key} style={node.width && node.height ? [wrapperStyle, paddedSize(node, wrapperStyle)] : wrapperStyle}>\n      <Image source={{uri: node.target}} style={imageStyle}/>\n    </View>\n  )\n}\n\nfunction renderTableCell(cell, row, column, rowCount, columnCount, output, state, styles) {\n  const cellStyle = [styles.tableCell]\n  const contentStyle = [styles.tableCellContent]\n\n  if (row % 2 == 0) {\n    cellStyle.push(styles.tableCellEvenRow)\n    contentStyle.push(styles.tableCellContentEvenRow)\n  } else {\n    cellStyle.push(styles.tableCellOddRow)\n    contentStyle.push(styles.tableCellContentOddRow)\n  }\n\n  if (column % 2 == 0) {\n    cellStyle.push(styles.tableCellEvenColumn)\n    contentStyle.push(styles.tableCellContentEvenColumn)\n  } else {\n    cellStyle.push(styles.tableCellOddColumn)\n    contentStyle.push(styles.tableCellContentOddColumn)\n  }\n\n  if (row == 1) {\n    cellStyle.push(styles.tableHeaderCell)\n    contentStyle.push(styles.tableHeaderCellContent)\n  } else if (row == rowCount) {\n    cellStyle.push(styles.tableCellLastRow)\n    contentStyle.push(styles.tableCellContentLastRow)\n  }\n\n  if (column == columnCount) {\n    cellStyle.push(styles.tableCellLastColumn)\n    contentStyle.push(styles.tableCellContentLastColumn)\n  }\n\n  return <Cell rowId={row} id={column} key={column} style={cellStyle}>\n    <Text style={contentStyle}>\n      {output(cell, state)}\n    </Text>\n  </Cell>\n}\n\nfunction paragraphRenderer() {\n  var renderText = textContentRenderer('paragraph')\n\n  return (node: InlineContentNode, output: OutputFunction, state: RenderState, styles: RenderStyles) => {\n    if (node.content instanceof Array && node.content.length === 1 && node.content[0].type === 'image') {\n      const imageNode : ImageNode = node.content[0]\n      return renderImage(imageNode, output, state, styles)\n    } else {\n      return renderText(node, output, state, styles)\n    }\n  }\n}\n\nfunction textContentRenderer(styleName, styleName2) {\n  return (node: InlineContentNode, output: OutputFunction, state: RenderState, styles: RenderStyles) => (\n    <Text key={state.key} style={styleName2 ? [styles[styleName], styles[styleName2]] : styles[styleName]}>\n      {typeof node.content === 'string' ? node.content : output(node.content, state)}\n    </Text>\n  )\n}\n\nfunction paddedSize(size, style) {\n  function either(a, b) {\n    return a === undefined ? b : a\n  }\n\n  const {\n    padding = 0,\n    paddingLeft,\n    paddingRight,\n    paddingTop,\n    paddingBottom,\n  } = style\n\n  return {\n    width: size.width + either(paddingLeft, padding) + either(paddingRight, padding),\n    height: size.height + either(paddingTop, padding) + either(paddingBottom, padding)\n  }\n}\n\nexport default Object.freeze({\n  blockQuote: textContentRenderer('blockQuote'),\n  br: (node: EmptyNode, output: OutputFunction, state: RenderState, styles: RenderStyles) => (\n    <Text key={state.key} style={styles.br}>\n      {'\\n\\n'}\n    </Text>\n  ),\n  codeBlock: textContentRenderer('codeBlock'),\n  del: textContentRenderer('del'),\n  em: textContentRenderer('em'),\n  heading: (node: HeadingNode, output: OutputFunction, state: RenderState, styles: RenderStyles) => (\n    textContentRenderer('heading', 'heading' + node.level)(node, output, state, styles)\n  ),\n  hr: (node: EmptyNode, output: OutputFunction, state: RenderState, styles: RenderStyles) => (\n    <View key={state.key} style={styles.hr}/>\n  ),\n  image: renderImage,\n  inlineCode: textContentRenderer('inlineCode'),\n  link: (node: LinkNode, output: OutputFunction, state: RenderState, styles: RenderStyles) => {\n    const onPress = state.onLinkPress\n    return <Text key={state.key} style={styles.link} onPress={onPress ? () => onPress(node.target) : null}>\n      {typeof node.content === 'string' ? node.content : output(node.content, state)}\n    </Text>\n  },\n  list: (node: ListNode, output: OutputFunction, state: RenderState, styles: RenderStyles) => (\n    <View key={state.key} style={styles.list}>\n      {node.items.map((item, i) => (\n        <View key={i} style={styles.listItem}>\n          {\n            node.ordered ?\n              <Text style={styles.listItemNumber}>{`${i + 1}.`}</Text>\n              :\n              <Text style={styles.listItemBullet}>\n                {styles.listItemBullet && styles.listItemBullet.content ? styles.listItemBullet.content : '\\u2022'}\n              </Text>\n          }\n          <Text style={node.ordered ? styles.listItemOrderedContent : styles.listItemUnorderedContent}>\n            {output(item, state)}\n          </Text>\n        </View>\n      ))}\n    </View>\n  ),\n  newline: (node: EmptyNode, output: OutputFunction, state: RenderState, styles: RenderStyles) => (\n    <Text key={state.key} style={styles.newline}>\n      {'\\n'}\n    </Text>\n  ),\n  paragraph: paragraphRenderer(),\n  strong: textContentRenderer('strong'),\n  table: (node: TableNode, output: OutputFunction, state: RenderState, styles: RenderStyles) => (\n    <Grid key={state.key} style={styles.table}>\n      {[<Row id={1} key={1}>\n        {node.header.map((cell, column) => renderTableCell(cell, 1, column + 1, node.cells.length + 1, node.header.length, output, state, styles))}\n      </Row>].concat(node.cells.map((cells, row) => (\n        <Row id={row + 2} key={row + 2}>\n          {cells.map((cell, column) => renderTableCell(cell, row + 2, column + 1, node.cells.length + 1, cells.length, output, state, styles))}\n        </Row>\n      )))}\n    </Grid>\n  ),\n  text: textContentRenderer('text'),\n  u: textContentRenderer('u')\n})\n"]},"metadata":{},"sourceType":"module"}
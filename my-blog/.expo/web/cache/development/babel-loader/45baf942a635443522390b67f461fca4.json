{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"render\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport SimpleMarkdown from 'simple-markdown';\nimport DefaultRenders from \"./renders\";\nimport DefaultStyles from \"./styles\";\n\nfunction simpleMarkdownRule(rule, styles) {\n  var render = rule.render,\n      properties = _objectWithoutProperties(rule, _excluded);\n\n  var reactRender = render ? {\n    react: function react(node, output, state) {\n      return render(node, output, state, styles);\n    }\n  } : null;\n  return _objectSpread(_objectSpread({}, properties), reactRender);\n}\n\nfunction simpleMarkdownRules(rules, styles) {\n  var markdownRules = {};\n  Object.keys(rules).forEach(function (nodeKey) {\n    return markdownRules[nodeKey] = simpleMarkdownRule(rules[nodeKey], styles);\n  });\n  return markdownRules;\n}\n\nfunction mergeStyles(baseStyles, styles) {\n  var mergedStyles = _objectSpread({}, styles);\n\n  Object.keys(baseStyles).forEach(function (nodeKey) {\n    return mergedStyles[nodeKey] = styles[nodeKey] ? [baseStyles[nodeKey], styles[nodeKey]] : baseStyles[nodeKey];\n  });\n  return mergedStyles;\n}\n\nfunction mergeRules(baseRules, rules) {\n  var mergedRules = _objectSpread({}, rules);\n\n  Object.keys(baseRules).forEach(function (nodeKey) {\n    return mergedRules[nodeKey] = _objectSpread(_objectSpread({}, baseRules[nodeKey]), rules[nodeKey]);\n  });\n  return mergedRules;\n}\n\nvar IMAGE_LINK = \"(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*\";\nvar IMAGE_HREF_AND_TITLE = \"\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\";\nvar IMAGE_SIZE = \"(?:\\\\s+=([0-9]+)x([0-9]+))?\\\\)\\\\s*\";\n\nvar inlineRegex = function inlineRegex(regex) {\n  return function (source, state) {\n    return state.inline ? regex.exec(source) : null;\n  };\n};\n\nvar unescapeUrl = function unescapeUrl(url) {\n  return url.replace(/\\\\([^0-9A-Za-z\\s])/g, '$1');\n};\n\nvar DefaultRules = Object.freeze(mergeRules(Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.entries(DefaultRenders).map(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      nodeKey = _ref2[0],\n      render = _ref2[1];\n\n  return _defineProperty({}, nodeKey, {\n    render: render\n  });\n})))), {\n  heading: {\n    match: SimpleMarkdown.blockRegex(/^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n *)*\\n/)\n  },\n  image: {\n    match: inlineRegex(new RegExp(\"^!\\\\[(\" + IMAGE_LINK + \")\\\\]\\\\(\" + IMAGE_HREF_AND_TITLE + IMAGE_SIZE)),\n    parse: function parse(capture, _parse, state) {\n      return {\n        alt: capture[1],\n        target: unescapeUrl(capture[2]),\n        title: capture[3],\n        width: capture[4] ? parseInt(capture[4]) : undefined,\n        height: capture[5] ? parseInt(capture[5]) : undefined\n      };\n    }\n  }\n}));\n\nvar MarkdownView = function (_Component) {\n  _inherits(MarkdownView, _Component);\n\n  var _super = _createSuper(MarkdownView);\n\n  function MarkdownView() {\n    _classCallCheck(this, MarkdownView);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MarkdownView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          _this$props$rules = _this$props.rules,\n          rules = _this$props$rules === void 0 ? {} : _this$props$rules,\n          _this$props$styles = _this$props.styles,\n          styles = _this$props$styles === void 0 ? {} : _this$props$styles,\n          onLinkPress = _this$props.onLinkPress;\n      var mergedStyles = mergeStyles(DefaultStyles, styles);\n      var mergedRules = mergeRules(SimpleMarkdown.defaultRules, simpleMarkdownRules(mergeRules(DefaultRules, rules), mergedStyles));\n      var markdown = (Array.isArray(this.props.children) ? this.props.children.join('') : this.props.children) + '\\n\\n';\n      var ast = SimpleMarkdown.parserFor(mergedRules)(markdown, {\n        inline: false\n      });\n      var render = SimpleMarkdown.reactFor(SimpleMarkdown.ruleOutput(mergedRules, 'react'));\n      var initialRenderState = {\n        onLinkPress: onLinkPress\n      };\n      return React.createElement(View, {\n        style: this.props.style\n      }, render(ast, initialRenderState));\n    }\n  }]);\n\n  return MarkdownView;\n}(Component);\n\nMarkdownView.propTypes = _objectSpread(_objectSpread({}, View.propTypes), {}, {\n  rules: PropTypes.objectOf(PropTypes.objectOf(PropTypes.func)),\n  styles: PropTypes.objectOf(PropTypes.object),\n  onLinkPress: PropTypes.func\n});\nexport default MarkdownView;","map":{"version":3,"sources":["D:/Coding/react/invoke/finalProject/my-blog/node_modules/react-native-markdown-view/MarkdownView.js"],"names":["PropTypes","React","Component","SimpleMarkdown","DefaultRenders","DefaultStyles","simpleMarkdownRule","rule","styles","render","properties","reactRender","react","node","output","state","simpleMarkdownRules","rules","markdownRules","Object","keys","forEach","nodeKey","mergeStyles","baseStyles","mergedStyles","mergeRules","baseRules","mergedRules","IMAGE_LINK","IMAGE_HREF_AND_TITLE","IMAGE_SIZE","inlineRegex","regex","source","inline","exec","unescapeUrl","url","replace","DefaultRules","freeze","assign","entries","map","heading","match","blockRegex","image","RegExp","parse","capture","alt","target","title","width","parseInt","undefined","height","MarkdownView","props","onLinkPress","defaultRules","markdown","Array","isArray","children","join","ast","parserFor","reactFor","ruleOutput","initialRenderState","style","propTypes","View","objectOf","func","object"],"mappings":";;;;;;;;;;;;;;;;;;;AAEA,OAAOA,SAAP,MAAsB,YAAtB;AAEA,OAAOC,KAAP,IACEC,SADF,QAEO,OAFP;;AAQA,OAAOC,cAAP,MAA2B,iBAA3B;AAEA,OAAOC,cAAP;AACA,OAAOC,aAAP;;AAQA,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,MAAlC,EAA0C;AACxC,MAAOC,MAAP,GAAgCF,IAAhC,CAAOE,MAAP;AAAA,MAAkBC,UAAlB,4BAAgCH,IAAhC;;AACA,MAAMI,WAAW,GAAGF,MAAM,GAAG;AAACG,IAAAA,KAAK,EAAE,eAACC,IAAD,EAAOC,MAAP,EAAeC,KAAf;AAAA,aAAyBN,MAAM,CAACI,IAAD,EAAOC,MAAP,EAAeC,KAAf,EAAsBP,MAAtB,CAA/B;AAAA;AAAR,GAAH,GAA2E,IAArG;AACA,yCAAWE,UAAX,GAA0BC,WAA1B;AACD;;AAED,SAASK,mBAAT,CAA6BC,KAA7B,EAAoCT,MAApC,EAA4C;AAC1C,MAAMU,aAAa,GAAG,EAAtB;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,OAAnB,CAA2B,UAAAC,OAAO;AAAA,WAAIJ,aAAa,CAACI,OAAD,CAAb,GAAyBhB,kBAAkB,CAACW,KAAK,CAACK,OAAD,CAAN,EAAiBd,MAAjB,CAA/C;AAAA,GAAlC;AACA,SAAOU,aAAP;AACD;;AAED,SAASK,WAAT,CAAqBC,UAArB,EAAiChB,MAAjC,EAAyC;AACvC,MAAMiB,YAAY,qBAAOjB,MAAP,CAAlB;;AACAW,EAAAA,MAAM,CAACC,IAAP,CAAYI,UAAZ,EAAwBH,OAAxB,CAAgC,UAAAC,OAAO;AAAA,WAAIG,YAAY,CAACH,OAAD,CAAZ,GAAwBd,MAAM,CAACc,OAAD,CAAN,GAAkB,CAACE,UAAU,CAACF,OAAD,CAAX,EAAsBd,MAAM,CAACc,OAAD,CAA5B,CAAlB,GAA2DE,UAAU,CAACF,OAAD,CAAjG;AAAA,GAAvC;AACA,SAAOG,YAAP;AACD;;AAED,SAASC,UAAT,CAAoBC,SAApB,EAA+BV,KAA/B,EAAsC;AACpC,MAAMW,WAAW,qBAAOX,KAAP,CAAjB;;AACAE,EAAAA,MAAM,CAACC,IAAP,CAAYO,SAAZ,EAAuBN,OAAvB,CAA+B,UAAAC,OAAO;AAAA,WAAIM,WAAW,CAACN,OAAD,CAAX,mCAA2BK,SAAS,CAACL,OAAD,CAApC,GAAkDL,KAAK,CAACK,OAAD,CAAvD,CAAJ;AAAA,GAAtC;AACA,SAAOM,WAAP;AACD;;AAED,IAAMC,UAAU,GAAG,gDAAnB;AACA,IAAMC,oBAAoB,GAAG,iEAA7B;AACA,IAAMC,UAAU,GAAG,oCAAnB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD;AAAA,SAAY,UAACC,MAAD,EAASnB,KAAT;AAAA,WAAmBA,KAAK,CAACoB,MAAN,GAAeF,KAAK,CAACG,IAAN,CAAWF,MAAX,CAAf,GAAoC,IAAvD;AAAA,GAAZ;AAAA,CAApB;;AACA,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD;AAAA,SAASA,GAAG,CAACC,OAAJ,CAAY,qBAAZ,EAAmC,IAAnC,CAAT;AAAA,CAApB;;AAEA,IAAMC,YAAoB,GAAGrB,MAAM,CAACsB,MAAP,CAAcf,UAAU,CACnDP,MAAM,CAACuB,MAAP,OAAAvB,MAAM,GACJ,EADI,4BAEDA,MAAM,CAACwB,OAAP,CAAevC,cAAf,EAA+BwC,GAA/B,CAAmC;AAAA;AAAA,MAAEtB,OAAF;AAAA,MAAWb,MAAX;;AAAA,6BAA0Ba,OAA1B,EAAoC;AAACb,IAAAA,MAAM,EAAEA;AAAT,GAApC;AAAA,CAAnC,CAFC,GAD6C,EAKnD;AACEoC,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAE3C,cAAc,CAAC4C,UAAf,CAA0B,yCAA1B;AADA,GADX;AAIEC,EAAAA,KAAK,EAAE;AACLF,IAAAA,KAAK,EAAEd,WAAW,CAAC,IAAIiB,MAAJ,CAAW,WAAWpB,UAAX,GAAwB,SAAxB,GAAoCC,oBAApC,GAA2DC,UAAtE,CAAD,CADb;AAELmB,IAAAA,KAAK,EAAE,eAACC,OAAD,EAAUD,MAAV,EAAiBnC,KAAjB;AAAA,aAAuC;AAC5CqC,QAAAA,GAAG,EAAED,OAAO,CAAC,CAAD,CADgC;AAE5CE,QAAAA,MAAM,EAAEhB,WAAW,CAACc,OAAO,CAAC,CAAD,CAAR,CAFyB;AAG5CG,QAAAA,KAAK,EAAEH,OAAO,CAAC,CAAD,CAH8B;AAI5CI,QAAAA,KAAK,EAAEJ,OAAO,CAAC,CAAD,CAAP,GAAaK,QAAQ,CAACL,OAAO,CAAC,CAAD,CAAR,CAArB,GAAoCM,SAJC;AAK5CC,QAAAA,MAAM,EAAEP,OAAO,CAAC,CAAD,CAAP,GAAaK,QAAQ,CAACL,OAAO,CAAC,CAAD,CAAR,CAArB,GAAoCM;AALA,OAAvC;AAAA;AAFF;AAJT,CALmD,CAAxB,CAA7B;;IAsBME,Y;;;;;;;;;;;;;WASJ,kBAAS;AACP,wBAA+C,KAAKC,KAApD;AAAA,0CAAO3C,KAAP;AAAA,UAAOA,KAAP,kCAAe,EAAf;AAAA,2CAAmBT,MAAnB;AAAA,UAAmBA,MAAnB,mCAA4B,EAA5B;AAAA,UAAgCqD,WAAhC,eAAgCA,WAAhC;AAEA,UAAMpC,YAAY,GAAGF,WAAW,CAAClB,aAAD,EAAgBG,MAAhB,CAAhC;AACA,UAAMoB,WAAW,GAAGF,UAAU,CAACvB,cAAc,CAAC2D,YAAhB,EAA8B9C,mBAAmB,CAACU,UAAU,CAACc,YAAD,EAAevB,KAAf,CAAX,EAAkCQ,YAAlC,CAAjD,CAA9B;AAEA,UAAMsC,QAAQ,GAAG,CAACC,KAAK,CAACC,OAAN,CAAc,KAAKL,KAAL,CAAWM,QAAzB,IAAqC,KAAKN,KAAL,CAAWM,QAAX,CAAoBC,IAApB,CAAyB,EAAzB,CAArC,GAAoE,KAAKP,KAAL,CAAWM,QAAhF,IAA4F,MAA7G;AAEA,UAAME,GAAG,GAAGjE,cAAc,CAACkE,SAAf,CAAyBzC,WAAzB,EAAsCmC,QAAtC,EAAgD;AAAC5B,QAAAA,MAAM,EAAE;AAAT,OAAhD,CAAZ;AACA,UAAM1B,MAAM,GAAGN,cAAc,CAACmE,QAAf,CAAwBnE,cAAc,CAACoE,UAAf,CAA0B3C,WAA1B,EAAuC,OAAvC,CAAxB,CAAf;AACA,UAAM4C,kBAAkB,GAAG;AAACX,QAAAA,WAAW,EAAEA;AAAd,OAA3B;AAEA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWa;AAAxB,SACGhE,MAAM,CAAC2D,GAAD,EAAMI,kBAAN,CADT,CADF;AAKD;;;;EA1BwBtE,S;;AA6B3ByD,YAAY,CAACe,SAAb,mCACKC,IAAI,CAACD,SADV;AA6CEzD,EAAAA,KAAK,EAAEjB,SAAS,CAAC4E,QAAV,CAAmB5E,SAAS,CAAC4E,QAAV,CAAmB5E,SAAS,CAAC6E,IAA7B,CAAnB,CA7CT;AAqDErE,EAAAA,MAAM,EAAER,SAAS,CAAC4E,QAAV,CAAmB5E,SAAS,CAAC8E,MAA7B,CArDV;AA2DEjB,EAAAA,WAAW,EAAE7D,SAAS,CAAC6E;AA3DzB;AA8DA,eAAelB,YAAf","sourcesContent":["/* @flow */\n\nimport PropTypes from 'prop-types';\n\nimport React, {\n  Component,\n} from 'react'\n\nimport {\n  View,\n} from 'react-native'\n\nimport SimpleMarkdown from 'simple-markdown'\n\nimport DefaultRenders from './renders'\nimport DefaultStyles from './styles'\n\nimport type {\n  ImageNode,\n  Rules,\n  Styles,\n} from './types'\n\nfunction simpleMarkdownRule(rule, styles) {\n  const {render, ...properties} = rule\n  const reactRender = render ? {react: (node, output, state) => render(node, output, state, styles)} : null\n  return {...properties, ...reactRender}\n}\n\nfunction simpleMarkdownRules(rules, styles) {\n  const markdownRules = {}\n  Object.keys(rules).forEach(nodeKey => markdownRules[nodeKey] = simpleMarkdownRule(rules[nodeKey], styles))\n  return markdownRules\n}\n\nfunction mergeStyles(baseStyles, styles) {\n  const mergedStyles = {...styles}\n  Object.keys(baseStyles).forEach(nodeKey => mergedStyles[nodeKey] = styles[nodeKey] ? [baseStyles[nodeKey], styles[nodeKey]] : baseStyles[nodeKey])\n  return mergedStyles\n}\n\nfunction mergeRules(baseRules, rules) {\n  const mergedRules = {...rules}\n  Object.keys(baseRules).forEach(nodeKey => mergedRules[nodeKey] = {...baseRules[nodeKey], ...rules[nodeKey]})\n  return mergedRules\n}\n\nconst IMAGE_LINK = \"(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*\";\nconst IMAGE_HREF_AND_TITLE = \"\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\"\nconst IMAGE_SIZE = \"(?:\\\\s+=([0-9]+)x([0-9]+))?\\\\)\\\\s*\"\n\nconst inlineRegex = (regex) => ((source, state) => state.inline ? regex.exec(source) : null)\nconst unescapeUrl = (url) => url.replace(/\\\\([^0-9A-Za-z\\s])/g, '$1')\n\nconst DefaultRules : Rules = Object.freeze(mergeRules(\n  Object.assign(\n    {},\n    ...Object.entries(DefaultRenders).map(([nodeKey, render]) => ({[nodeKey]: {render: render}}))\n  ),\n  {\n    heading: {\n      match: SimpleMarkdown.blockRegex(/^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n *)*\\n/),\n    },\n    image: {\n      match: inlineRegex(new RegExp(\"^!\\\\[(\" + IMAGE_LINK + \")\\\\]\\\\(\" + IMAGE_HREF_AND_TITLE + IMAGE_SIZE)),\n      parse: (capture, parse, state): ImageNode => ({\n        alt: capture[1],\n        target: unescapeUrl(capture[2]),\n        title: capture[3],\n        width: capture[4] ? parseInt(capture[4]) : undefined,\n        height: capture[5] ? parseInt(capture[5]) : undefined,\n      })\n    }\n  }\n))\n\nclass MarkdownView extends Component {\n  props: {\n    style?: Object,\n    rules?: Rules,\n    onLinkPress?: (string) => void,\n    styles?: Styles,\n    children: string,\n  }\n\n  render() {\n    const {rules = {}, styles = {}, onLinkPress} = this.props\n\n    const mergedStyles = mergeStyles(DefaultStyles, styles)\n    const mergedRules = mergeRules(SimpleMarkdown.defaultRules, simpleMarkdownRules(mergeRules(DefaultRules, rules), mergedStyles))\n\n    const markdown = (Array.isArray(this.props.children) ? this.props.children.join('') : this.props.children) + '\\n\\n'\n\n    const ast = SimpleMarkdown.parserFor(mergedRules)(markdown, {inline: false})\n    const render = SimpleMarkdown.reactFor(SimpleMarkdown.ruleOutput(mergedRules, 'react'))\n    const initialRenderState = {onLinkPress: onLinkPress}\n\n    return (\n      <View style={this.props.style}>\n        {render(ast, initialRenderState)}\n      </View>\n    )\n  }\n}\n\nMarkdownView.propTypes = {\n  ...View.propTypes,\n\n  /**\n   * An object overriding or providing additional rules for parsing and rendering Markdown. Keys\n   * are rule names (you can define your own, or override existing rules), and values are an object\n   * of the form:\n   *\n   *   {\n   *     match: RegExp,\n   *     parse: (match, nestedParse, state),\n   *     render: (node, output, state, styles)\n   *   }\n   *\n   * match: A Regex to be executed against the MarkdownView's text.\n   *\n   * parse: A function that returns an AST 'node' object to pass to the rules' render method. If\n   *        the object returned has a 'type' key, rendering will be deferred to the rule matching\n   *        the value of 'type'.\n   *\n   *   match: Return value of match.exec()\n   *   nestedParse: (string, state) => object, call this to parse nested nodes.\n   *   state: Parser state object, you can attach your own state properties if desirable.\n   *\n   * render: A function that returns the rendered node (and its children). Typically you'll return\n   *         a React Native view component.\n   *\n   *   node: An AST node. Please refer to the Flow types in `types.js`.\n   *   output: A function that can be used to render nested/children nodes. Typically you'll want\n   *           call `output(node.children)` and use that as the content of the component you're\n   *           returning.\n   *   state: Renderer state object. You can attach your own state to this object and use it, for\n   *          example, to render nodes differently depending on their parents/ancestors.\n   *   styles: An object containing React Native styles that you can use for rendering components.\n   *\n   * Default rendering rules have keys:\n   *\n   *   heading, hr, codeBlock, blockQuote, list, table, newline, paragraph, link, image, em,\n   *   strong, u, del, inlineCode, br, text\n   *\n   * Default parse-only rules (which defer rendering to another rule) have keys:\n   *\n   *   nptable, lheading, fence, def, escape, autolink, mailto, url, reflink, refimage,\n   *\n   */\n  rules: PropTypes.objectOf(PropTypes.objectOf(PropTypes.func)),\n\n  /**\n   * An object providing styles to be passed to a corresponding rule render method. Keys are\n   * rule/node names and values are React Native style objects. If a style is defined here and a\n   * default style exists, they will me merged, with style properties defined here taking\n   * precedence.\n   */\n  styles: PropTypes.objectOf(PropTypes.object),\n\n  /**\n   * Callback function for when a link is pressed. The callback receives the URL of the link as a\n   * string (first and only argument).\n   */\n  onLinkPress: PropTypes.func,\n}\n\nexport default MarkdownView\n"]},"metadata":{},"sourceType":"module"}
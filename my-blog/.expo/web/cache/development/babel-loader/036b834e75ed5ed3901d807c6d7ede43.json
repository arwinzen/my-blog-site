{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport style from \"./style\";\n\nvar Cell = function (_Component) {\n  _inherits(Cell, _Component);\n\n  var _super = _createSuper(Cell);\n\n  function Cell() {\n    _classCallCheck(this, Cell);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Cell, [{\n    key: \"updateCell\",\n    value: function updateCell(cell) {\n      var _this = this;\n\n      cell && cell.measure(function (x, y, w, h) {\n        _this.context.rntgMeasureCell(_this.props.rowId, _this.props.id, x, y, w, h);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: [style.cell, this.props.style],\n        ref: this.updateCell.bind(this)\n      }, this.props.children);\n    }\n  }]);\n\n  return Cell;\n}(Component);\n\nCell.propTypes = {\n  children: PropTypes.node,\n  rowId: PropTypes.number.isRequired,\n  id: PropTypes.number.isRequired\n};\nCell.contextTypes = {\n  rntgMeasureCell: PropTypes.func\n};\nexport { Cell as default };","map":{"version":3,"sources":["D:/Coding/react/invoke/finalProject/my-blog/node_modules/react-native-markdown-view/node_modules/react-native-tabular-grid-markdown-view/src/Cell.js"],"names":["PropTypes","React","Component","style","Cell","cell","measure","x","y","w","h","context","rntgMeasureCell","props","rowId","id","updateCell","bind","children","propTypes","node","number","isRequired","contextTypes","func"],"mappings":";;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAGA,OAAOC,KAAP;;IAEqBC,I;;;;;;;;;;;;;WAYjB,oBAAWC,IAAX,EAAiB;AAAA;;AACbA,MAAAA,IAAI,IAAIA,IAAI,CAACC,OAAL,CAAa,UAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAgB;AACjC,QAAA,KAAI,CAACC,OAAL,CAAaC,eAAb,CAA6B,KAAI,CAACC,KAAL,CAAWC,KAAxC,EAA+C,KAAI,CAACD,KAAL,CAAWE,EAA1D,EAA8DR,CAA9D,EAAiEC,CAAjE,EAAoEC,CAApE,EAAuEC,CAAvE;AACH,OAFO,CAAR;AAGH;;;WAED,kBAAS;AACL,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACP,KAAK,CAACE,IAAP,EAAa,KAAKQ,KAAL,CAAWV,KAAxB,CAAb;AAA6C,QAAA,GAAG,EAAE,KAAKa,UAAL,CAAgBC,IAAhB,CAAqB,IAArB;AAAlD,SACK,KAAKJ,KAAL,CAAWK,QADhB,CADJ;AAKH;;;;EAxB6BhB,S;;AAAbE,I,CAEVe,S,GAAY;AACfD,EAAAA,QAAQ,EAAElB,SAAS,CAACoB,IADL;AAEfN,EAAAA,KAAK,EAAEd,SAAS,CAACqB,MAAV,CAAiBC,UAFT;AAGfP,EAAAA,EAAE,EAAEf,SAAS,CAACqB,MAAV,CAAiBC;AAHN,C;AAFFlB,I,CAQVmB,Y,GAAe;AAClBX,EAAAA,eAAe,EAAEZ,SAAS,CAACwB;AADT,C;SARLpB,I","sourcesContent":["import PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {View} from 'react-native';\n\nimport style from './style';\n\nexport default class Cell extends Component {\n\n    static propTypes = {\n        children: PropTypes.node,\n        rowId: PropTypes.number.isRequired,\n        id: PropTypes.number.isRequired\n    };\n\n    static contextTypes = {\n        rntgMeasureCell: PropTypes.func\n    };\n\n    updateCell(cell) {\n        cell && cell.measure((x, y, w, h) => {\n            this.context.rntgMeasureCell(this.props.rowId, this.props.id, x, y, w, h);\n        });\n    }\n\n    render() {\n        return (\n            <View style={[style.cell, this.props.style]} ref={this.updateCell.bind(this)}>\n                {this.props.children}\n            </View>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
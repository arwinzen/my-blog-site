{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { AuthContext } from \"./Providers/AuthProvider\";\nimport { AuthStack } from \"./Stacks/AuthStack\";\nimport { AppStack } from \"./Stacks/AppStack\";\nimport * as SecureStore from 'expo-secure-store';\nexport default function Routes() {\n  var _useContext = useContext(AuthContext),\n      user = _useContext.user,\n      setUser = _useContext.setUser,\n      login = _useContext.login,\n      logout = _useContext.logout;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  useEffect(function () {\n    SecureStore.getItemAsync('user').then(function (userString) {\n      if (userString) {\n        userObject = JSON.parse(userString);\n        setUser(userObject);\n      }\n\n      setLoading(false);\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }, []);\n\n  if (loading) {\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center'\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"large\"\n    }));\n  }\n\n  return React.createElement(NavigationContainer, null, user ? React.createElement(AppStack, null) : React.createElement(AuthStack, null));\n}","map":{"version":3,"sources":["D:/Coding/react/invoke/finalProject/my-blog/src/Routes.js"],"names":["React","useState","useEffect","useContext","NavigationContainer","AuthContext","AuthStack","AppStack","SecureStore","Routes","user","setUser","login","logout","loading","setLoading","getItemAsync","then","userString","userObject","JSON","parse","catch","err","console","log","flex","alignItems","justifyContent"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;;;;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,WAAT;AACA,SAASC,SAAT;AACA,SAASC,QAAT;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AAEA,eAAe,SAASC,MAAT,GAAkB;AAC/B,oBAAyCN,UAAU,CAACE,WAAD,CAAnD;AAAA,MAAQK,IAAR,eAAQA,IAAR;AAAA,MAAcC,OAAd,eAAcA,OAAd;AAAA,MAAuBC,KAAvB,eAAuBA,KAAvB;AAAA,MAA8BC,MAA9B,eAA8BA,MAA9B;;AACA,kBAA8BZ,QAAQ,CAAC,IAAD,CAAtC;AAAA;AAAA,MAAOa,OAAP;AAAA,MAAgBC,UAAhB;;AAEAb,EAAAA,SAAS,CAAC,YAAM;AAEdM,IAAAA,WAAW,CAACQ,YAAZ,CAAyB,MAAzB,EACGC,IADH,CACQ,UAAAC,UAAU,EAAI;AAClB,UAAIA,UAAJ,EAAgB;AAGdC,QAAAA,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWH,UAAX,CAAb;AACAP,QAAAA,OAAO,CAACQ,UAAD,CAAP;AACD;;AACDJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KATH,EAUGO,KAVH,CAUS,UAAAC,GAAG,EAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAZH;AAaD,GAfQ,EAeN,EAfM,CAAT;;AAiBA,MAAIT,OAAJ,EAAa;AACX,WACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEY,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,UAAU,EAAE,QAAvB;AAAiCC,QAAAA,cAAc,EAAE;AAAjD;AAAb,OACE,oBAAC,iBAAD;AAAmB,MAAA,IAAI,EAAC;AAAxB,MADF,CADF;AAKD;;AAED,SACE,oBAAC,mBAAD,QACGlB,IAAI,GAAG,oBAAC,QAAD,OAAH,GAAkB,oBAAC,SAAD,OADzB,CADF;AAKD","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport { StyleSheet, View, ActivityIndicator } from 'react-native';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { AuthContext } from './Providers/AuthProvider';\r\nimport { AuthStack } from './Stacks/AuthStack';\r\nimport { AppStack } from './Stacks/AppStack';\r\nimport * as SecureStore from 'expo-secure-store';\r\n\r\nexport default function Routes() {\r\n  const { user, setUser, login, logout } = useContext(AuthContext)\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // check if the user is logged in or not\r\n    SecureStore.getItemAsync('user')\r\n      .then(userString => {\r\n        if (userString) {\r\n          // decode it\r\n          // login();\r\n          userObject = JSON.parse(userString)\r\n          setUser(userObject);\r\n        }\r\n        setLoading(false);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return (\r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n        <ActivityIndicator size=\"large\" />\r\n      </View>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <NavigationContainer>\r\n      {user ? <AppStack /> : <AuthStack />}\r\n    </NavigationContainer>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}